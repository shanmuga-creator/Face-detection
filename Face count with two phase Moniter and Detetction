import cv2
import pandas as pd
import time
from datetime import datetime

# Load the Haar Cascade Classifier
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Initialize the webcam
cap = cv2.VideoCapture(0)

# Set the frame size
cap.set(3, 640)  # Width
cap.set(4, 640)  # Height

# Initialize person count data
person_count_data = []

def save_to_excel(data, total_person_count):
    try:
        existing_data = pd.read_excel('Person_Count_Log.xlsx')
    except FileNotFoundError:
        existing_data = pd.DataFrame(columns=['DateTime', 'PersonCount'])

    # Append new data to the existing Excel file
    new_data = pd.DataFrame(data)
    summary_data = pd.DataFrame([{'DateTime': 'Total', 'PersonCount': total_person_count}])
    data = pd.concat([new_data, summary_data], ignore_index=True)
    final_data = pd.concat([existing_data, data], ignore_index=True)
    final_data.to_excel('Person_Count_Log.xlsx', index=False)

    print("Data saved to Person_Count_Log.xlsx")
    print(f"Total Person Count: {total_person_count}")

# **Phase 1: Monitoring for 2 minutes (No Detection)**
print("Phase 1: Monitoring started (no detection).")
monitoring_start_time = time.time()
while time.time() - monitoring_start_time < 20:  # 120 seconds
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break

    # Display raw camera feed
    cv2.putText(frame, "Phase 1: Monitoring (No Detection)", (10, 50),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA)
    cv2.imshow("Phase 1: Monitoring", frame)

    # Exit on 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        cap.release()
        cv2.destroyAllWindows()
        save_to_excel(person_count_data, 0)
        exit()

print("Phase 1 completed. Proceeding to Phase 2...")

# **Phase 2: Person Detection for 2 minutes**
print("Phase 2: Person detection started.")
detection_start_time = time.time()
total_person_count = 0
while time.time() - detection_start_time < 20:  # 120 seconds
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break

    # Convert to grayscale (Haar works better on grayscale images)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # Count detected faces
    person_count = len(faces)
    total_person_count += person_count

    # Draw rectangles around detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Get current timestamp
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # Append the data
    person_count_data.append({"DateTime": timestamp, "PersonCount": person_count})

    # Display the person count on the frame
    cv2.putText(frame, f"People Count: {person_count}", (10, 50),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

    # Show the frame
    cv2.imshow("Phase 2: Human Detection", frame)

    # Exit on 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        cap.release()
        cv2.destroyAllWindows()
        save_to_excel(person_count_data, total_person_count)
        exit()

print("Phase 2 completed. Saving data...")

# Save person count data after Phase 2
save_to_excel(person_count_data, total_person_count)

# Release resources
cap.release()
cv2.destroyAllWindows()
print("Data saved to Person_Count_Log.xlsx")
